
safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000efc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00000efc  00000f70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000208  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ad7  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c84  00000000  00000000  00003d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001482  00000000  00000000  000049c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000408  00000000  00000000  00005e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000662  00000000  00000000  00006254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e66  00000000  00000000  000068b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  0000871c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0b 04 	call	0x816	; 0x816 <main>
  7a:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <check_status>:
#include <util/delay.h>



safe_status check_status(){
	uint8 check = EEPROM_read(EEPROM_STATUS_ADRESS);
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 4d 07 	call	0xe9a	; 0xe9a <EEPROM_read>
	safe_status status = FIRST_SETUP;
	if (check != 0xff){
  8a:	8f 3f       	cpi	r24, 0xFF	; 255
  8c:	11 f4       	brne	.+4      	; 0x92 <check_status+0x10>



safe_status check_status(){
	uint8 check = EEPROM_read(EEPROM_STATUS_ADRESS);
	safe_status status = FIRST_SETUP;
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	08 95       	ret
	if (check != 0xff){
		status = NOT_FIRST_SETUP;
  92:	81 e0       	ldi	r24, 0x01	; 1
	}
	return status;
}
  94:	08 95       	ret

00000096 <check_password>:

password_status check_password(uint8 * password){
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	7c 01       	movw	r14, r24
	password_status status = CORRECT;
	for (int i=0;i<4;i++){
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	0b c0       	rjmp	.+22     	; 0xbe <check_password+0x28>
		if (password[i] != EEPROM_read(EEPROM_PASSWORD1_ADRESS+i)){
  a8:	f7 01       	movw	r30, r14
  aa:	ec 0f       	add	r30, r28
  ac:	fd 1f       	adc	r31, r29
  ae:	10 81       	ld	r17, Z
  b0:	ce 01       	movw	r24, r28
  b2:	81 96       	adiw	r24, 0x21	; 33
  b4:	0e 94 4d 07 	call	0xe9a	; 0xe9a <EEPROM_read>
  b8:	18 13       	cpse	r17, r24
  ba:	06 c0       	rjmp	.+12     	; 0xc8 <check_password+0x32>
	return status;
}

password_status check_password(uint8 * password){
	password_status status = CORRECT;
	for (int i=0;i<4;i++){
  bc:	21 96       	adiw	r28, 0x01	; 1
  be:	c4 30       	cpi	r28, 0x04	; 4
  c0:	d1 05       	cpc	r29, r1
  c2:	94 f3       	brlt	.-28     	; 0xa8 <check_password+0x12>
	}
	return status;
}

password_status check_password(uint8 * password){
	password_status status = CORRECT;
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	01 c0       	rjmp	.+2      	; 0xca <check_password+0x34>
	for (int i=0;i<4;i++){
		if (password[i] != EEPROM_read(EEPROM_PASSWORD1_ADRESS+i)){
			status = NOT_CORRECT;
  c8:	81 e0       	ldi	r24, 0x01	; 1
			break;
			}
	}
	return status;
}
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	ff 90       	pop	r15
  d2:	ef 90       	pop	r14
  d4:	08 95       	ret

000000d6 <set_new_password>:

void set_new_password(uint8 * password){
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	8c 01       	movw	r16, r24
		for (int i=0;i<4;i++){
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
  e4:	09 c0       	rjmp	.+18     	; 0xf8 <set_new_password+0x22>
				EEPROM_write(EEPROM_PASSWORD1_ADRESS+i,password[i]);
  e6:	f8 01       	movw	r30, r16
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	60 81       	ld	r22, Z
  ee:	ce 01       	movw	r24, r28
  f0:	81 96       	adiw	r24, 0x21	; 33
  f2:	0e 94 41 07 	call	0xe82	; 0xe82 <EEPROM_write>
	}
	return status;
}

void set_new_password(uint8 * password){
		for (int i=0;i<4;i++){
  f6:	21 96       	adiw	r28, 0x01	; 1
  f8:	c4 30       	cpi	r28, 0x04	; 4
  fa:	d1 05       	cpc	r29, r1
  fc:	a4 f3       	brlt	.-24     	; 0xe6 <set_new_password+0x10>
				EEPROM_write(EEPROM_PASSWORD1_ADRESS+i,password[i]);
		}
		EEPROM_write(EEPROM_STATUS_ADRESS,'h');
  fe:	68 e6       	ldi	r22, 0x68	; 104
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 41 07 	call	0xe82	; 0xe82 <EEPROM_write>
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	08 95       	ret

00000112 <read_password>:

uint8* read_password(safe_status *status){
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <read_password+0x14>
 126:	00 d0       	rcall	.+0      	; 0x128 <read_password+0x16>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	6c 01       	movw	r12, r24

	uint8 num;
	uint8 password[4]={0};
 12e:	19 82       	std	Y+1, r1	; 0x01
 130:	1a 82       	std	Y+2, r1	; 0x02
 132:	1b 82       	std	Y+3, r1	; 0x03
 134:	1c 82       	std	Y+4, r1	; 0x04
	uint8 reset_flag=0;
	switch (*status){
 136:	fc 01       	movw	r30, r24
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	09 f4       	brne	.+2      	; 0x140 <read_password+0x2e>
 13e:	5f c0       	rjmp	.+190    	; 0x1fe <read_password+0xec>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	09 f0       	breq	.+2      	; 0x146 <read_password+0x34>
 144:	d1 c0       	rjmp	.+418    	; 0x2e8 <read_password+0x1d6>
		case NOT_FIRST_SETUP:
			lcd_clear_screen();
 146:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd_clear_screen>
			lcd_move_cursor(1,1);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
			lcd_send_string("check Password:");
 152:	80 e7       	ldi	r24, 0x70	; 112
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_send_string>
			for (int i=0;i<4;i++){
 15a:	e1 2c       	mov	r14, r1
 15c:	f1 2c       	mov	r15, r1
 15e:	49 c0       	rjmp	.+146    	; 0x1f2 <read_password+0xe0>
					num = keypad_read();
 160:	0e 94 af 02 	call	0x55e	; 0x55e <keypad_read>
 164:	18 2f       	mov	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	21 ee       	ldi	r18, 0xE1	; 225
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	f1 50       	subi	r31, 0x01	; 1
 16e:	20 40       	sbci	r18, 0x00	; 0
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <read_password+0x5a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <read_password+0x64>
 176:	00 00       	nop
 178:	0c c0       	rjmp	.+24     	; 0x192 <read_password+0x80>
					_delay_ms(200);
					while(num == 0xff){
						num = keypad_read();
 17a:	0e 94 af 02 	call	0x55e	; 0x55e <keypad_read>
 17e:	18 2f       	mov	r17, r24
 180:	9f ef       	ldi	r25, 0xFF	; 255
 182:	e1 ee       	ldi	r30, 0xE1	; 225
 184:	f4 e0       	ldi	r31, 0x04	; 4
 186:	91 50       	subi	r25, 0x01	; 1
 188:	e0 40       	sbci	r30, 0x00	; 0
 18a:	f0 40       	sbci	r31, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <read_password+0x74>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <read_password+0x7e>
 190:	00 00       	nop
			lcd_move_cursor(1,1);
			lcd_send_string("check Password:");
			for (int i=0;i<4;i++){
					num = keypad_read();
					_delay_ms(200);
					while(num == 0xff){
 192:	1f 3f       	cpi	r17, 0xFF	; 255
 194:	91 f3       	breq	.-28     	; 0x17a <read_password+0x68>
						num = keypad_read();
						_delay_ms(200);
					}
					if (num != RESET_CHAR){
 196:	11 34       	cpi	r17, 0x41	; 65
 198:	21 f1       	breq	.+72     	; 0x1e2 <read_password+0xd0>
						*(password+i) = num;
 19a:	e1 e0       	ldi	r30, 0x01	; 1
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ec 0f       	add	r30, r28
 1a0:	fd 1f       	adc	r31, r29
 1a2:	ee 0d       	add	r30, r14
 1a4:	ff 1d       	adc	r31, r15
 1a6:	10 83       	st	Z, r17
						lcd_move_cursor(2,i+1);
 1a8:	01 e0       	ldi	r16, 0x01	; 1
 1aa:	0e 0d       	add	r16, r14
 1ac:	60 2f       	mov	r22, r16
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
						lcd_send_char(num);
 1b4:	81 2f       	mov	r24, r17
 1b6:	0e 94 aa 03 	call	0x754	; 0x754 <lcd_send_char>
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	89 e6       	ldi	r24, 0x69	; 105
 1be:	98 e1       	ldi	r25, 0x18	; 24
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <read_password+0xae>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <read_password+0xb8>
 1ca:	00 00       	nop
						_delay_ms(1000);
						lcd_move_cursor(2,i+1);
 1cc:	60 2f       	mov	r22, r16
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
						lcd_send_char('*');
 1d4:	8a e2       	ldi	r24, 0x2A	; 42
 1d6:	0e 94 aa 03 	call	0x754	; 0x754 <lcd_send_char>
	switch (*status){
		case NOT_FIRST_SETUP:
			lcd_clear_screen();
			lcd_move_cursor(1,1);
			lcd_send_string("check Password:");
			for (int i=0;i<4;i++){
 1da:	ef ef       	ldi	r30, 0xFF	; 255
 1dc:	ee 1a       	sub	r14, r30
 1de:	fe 0a       	sbc	r15, r30
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <read_password+0xe0>
						_delay_ms(1000);
						lcd_move_cursor(2,i+1);
						lcd_send_char('*');
						}
					else{
						EEPROM_write(EEPROM_STATUS_ADRESS,0xff);
 1e2:	6f ef       	ldi	r22, 0xFF	; 255
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 41 07 	call	0xe82	; 0xe82 <EEPROM_write>
						*status = FIRST_SETUP;
 1ec:	f6 01       	movw	r30, r12
 1ee:	10 82       	st	Z, r1
						break;
 1f0:	7b c0       	rjmp	.+246    	; 0x2e8 <read_password+0x1d6>
	switch (*status){
		case NOT_FIRST_SETUP:
			lcd_clear_screen();
			lcd_move_cursor(1,1);
			lcd_send_string("check Password:");
			for (int i=0;i<4;i++){
 1f2:	f4 e0       	ldi	r31, 0x04	; 4
 1f4:	ef 16       	cp	r14, r31
 1f6:	f1 04       	cpc	r15, r1
 1f8:	0c f4       	brge	.+2      	; 0x1fc <read_password+0xea>
 1fa:	b2 cf       	rjmp	.-156    	; 0x160 <read_password+0x4e>
 1fc:	75 c0       	rjmp	.+234    	; 0x2e8 <read_password+0x1d6>
					}

			}
			break;
		case FIRST_SETUP:
			*status = PASSWORD_SET;
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	f6 01       	movw	r30, r12
 202:	80 83       	st	Z, r24
			lcd_clear_screen();
 204:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd_clear_screen>
			lcd_move_cursor(1,1);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
			lcd_send_string("Set Password:");
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_send_string>
			for (int i=0;i<4;i++){
 218:	e1 2c       	mov	r14, r1
 21a:	f1 2c       	mov	r15, r1

uint8* read_password(safe_status *status){

	uint8 num;
	uint8 password[4]={0};
	uint8 reset_flag=0;
 21c:	b1 2c       	mov	r11, r1
		case FIRST_SETUP:
			*status = PASSWORD_SET;
			lcd_clear_screen();
			lcd_move_cursor(1,1);
			lcd_send_string("Set Password:");
			for (int i=0;i<4;i++){
 21e:	4a c0       	rjmp	.+148    	; 0x2b4 <read_password+0x1a2>
					num = keypad_read();
 220:	0e 94 af 02 	call	0x55e	; 0x55e <keypad_read>
 224:	18 2f       	mov	r17, r24
 226:	ff ef       	ldi	r31, 0xFF	; 255
 228:	21 ee       	ldi	r18, 0xE1	; 225
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	f1 50       	subi	r31, 0x01	; 1
 22e:	20 40       	sbci	r18, 0x00	; 0
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <read_password+0x11a>
 234:	00 c0       	rjmp	.+0      	; 0x236 <read_password+0x124>
 236:	00 00       	nop
 238:	0c c0       	rjmp	.+24     	; 0x252 <read_password+0x140>
					_delay_ms(200);
					while(num == 0xff){
						num = keypad_read();
 23a:	0e 94 af 02 	call	0x55e	; 0x55e <keypad_read>
 23e:	18 2f       	mov	r17, r24
 240:	9f ef       	ldi	r25, 0xFF	; 255
 242:	e1 ee       	ldi	r30, 0xE1	; 225
 244:	f4 e0       	ldi	r31, 0x04	; 4
 246:	91 50       	subi	r25, 0x01	; 1
 248:	e0 40       	sbci	r30, 0x00	; 0
 24a:	f0 40       	sbci	r31, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <read_password+0x134>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <read_password+0x13e>
 250:	00 00       	nop
			lcd_move_cursor(1,1);
			lcd_send_string("Set Password:");
			for (int i=0;i<4;i++){
					num = keypad_read();
					_delay_ms(200);
					while(num == 0xff){
 252:	1f 3f       	cpi	r17, 0xFF	; 255
 254:	91 f3       	breq	.-28     	; 0x23a <read_password+0x128>
						num = keypad_read();
						_delay_ms(200);
					}
					if (num == RESET_CHAR){
 256:	11 34       	cpi	r17, 0x41	; 65
 258:	51 f4       	brne	.+20     	; 0x26e <read_password+0x15c>
						EEPROM_write(EEPROM_STATUS_ADRESS,0xff);
 25a:	6f ef       	ldi	r22, 0xFF	; 255
 25c:	80 e2       	ldi	r24, 0x20	; 32
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 41 07 	call	0xe82	; 0xe82 <EEPROM_write>
						reset_flag=1;
						*status = FIRST_SETUP;
 264:	f6 01       	movw	r30, r12
 266:	10 82       	st	Z, r1
						num = keypad_read();
						_delay_ms(200);
					}
					if (num == RESET_CHAR){
						EEPROM_write(EEPROM_STATUS_ADRESS,0xff);
						reset_flag=1;
 268:	bb 24       	eor	r11, r11
 26a:	b3 94       	inc	r11
 26c:	20 c0       	rjmp	.+64     	; 0x2ae <read_password+0x19c>
						*status = FIRST_SETUP;
					}
					else{
					password[i] = num;
 26e:	e1 e0       	ldi	r30, 0x01	; 1
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	ec 0f       	add	r30, r28
 274:	fd 1f       	adc	r31, r29
 276:	ee 0d       	add	r30, r14
 278:	ff 1d       	adc	r31, r15
 27a:	10 83       	st	Z, r17
					lcd_move_cursor(2,1+i);
 27c:	01 e0       	ldi	r16, 0x01	; 1
 27e:	0e 0d       	add	r16, r14
 280:	60 2f       	mov	r22, r16
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
					lcd_send_char(num);
 288:	81 2f       	mov	r24, r17
 28a:	0e 94 aa 03 	call	0x754	; 0x754 <lcd_send_char>
 28e:	ff ef       	ldi	r31, 0xFF	; 255
 290:	29 e6       	ldi	r18, 0x69	; 105
 292:	88 e1       	ldi	r24, 0x18	; 24
 294:	f1 50       	subi	r31, 0x01	; 1
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <read_password+0x182>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <read_password+0x18c>
 29e:	00 00       	nop
					_delay_ms(1000);
					lcd_move_cursor(2,i+1);
 2a0:	60 2f       	mov	r22, r16
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
					lcd_send_char('*');
 2a8:	8a e2       	ldi	r24, 0x2A	; 42
 2aa:	0e 94 aa 03 	call	0x754	; 0x754 <lcd_send_char>
		case FIRST_SETUP:
			*status = PASSWORD_SET;
			lcd_clear_screen();
			lcd_move_cursor(1,1);
			lcd_send_string("Set Password:");
			for (int i=0;i<4;i++){
 2ae:	9f ef       	ldi	r25, 0xFF	; 255
 2b0:	e9 1a       	sub	r14, r25
 2b2:	f9 0a       	sbc	r15, r25
 2b4:	e4 e0       	ldi	r30, 0x04	; 4
 2b6:	ee 16       	cp	r14, r30
 2b8:	f1 04       	cpc	r15, r1
 2ba:	0c f4       	brge	.+2      	; 0x2be <read_password+0x1ac>
 2bc:	b1 cf       	rjmp	.-158    	; 0x220 <read_password+0x10e>
					lcd_move_cursor(2,i+1);
					lcd_send_char('*');
					}
				}
				
			if (reset_flag == 0){
 2be:	b1 10       	cpse	r11, r1
 2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <read_password+0x1d6>
				lcd_clear_screen();
 2c2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd_clear_screen>
				lcd_move_cursor(1,1);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
				lcd_send_string("Password is set");
 2ce:	8e e8       	ldi	r24, 0x8E	; 142
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_send_string>
 2d6:	ff ef       	ldi	r31, 0xFF	; 255
 2d8:	2d e3       	ldi	r18, 0x3D	; 61
 2da:	89 e4       	ldi	r24, 0x49	; 73
 2dc:	f1 50       	subi	r31, 0x01	; 1
 2de:	20 40       	sbci	r18, 0x00	; 0
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <read_password+0x1ca>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <read_password+0x1d4>
 2e6:	00 00       	nop
			break;
				
			
	}
	return password;
}
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	bf 90       	pop	r11
 306:	08 95       	ret

00000308 <check_password_message>:
	

void check_password_message(password_status status, uint8 trials){
 308:	cf 93       	push	r28
 30a:	c6 2f       	mov	r28, r22
	switch(status){
 30c:	88 23       	and	r24, r24
 30e:	19 f0       	breq	.+6      	; 0x316 <check_password_message+0xe>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	e9 f0       	breq	.+58     	; 0x34e <check_password_message+0x46>
 314:	47 c0       	rjmp	.+142    	; 0x3a4 <check_password_message+0x9c>
		case CORRECT:
			lcd_clear_screen();
 316:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd_clear_screen>
			lcd_move_cursor(1,1);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
			lcd_send_string("Correct Password");
 322:	8e e9       	ldi	r24, 0x9E	; 158
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_send_string>
			led_on(PORT_C,GREEN_LED_PIN);
 32a:	62 e0       	ldi	r22, 0x02	; 2
 32c:	83 e4       	ldi	r24, 0x43	; 67
 32e:	0e 94 03 04 	call	0x806	; 0x806 <led_on>
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	8d e3       	ldi	r24, 0x3D	; 61
 336:	99 e4       	ldi	r25, 0x49	; 73
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <check_password_message+0x30>
 340:	00 c0       	rjmp	.+0      	; 0x342 <check_password_message+0x3a>
 342:	00 00       	nop
			_delay_ms(3000);
			led_off(PORT_C,GREEN_LED_PIN);
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	83 e4       	ldi	r24, 0x43	; 67
 348:	0e 94 07 04 	call	0x80e	; 0x80e <led_off>
			break;
 34c:	2b c0       	rjmp	.+86     	; 0x3a4 <check_password_message+0x9c>
			
		case NOT_CORRECT:
			lcd_clear_screen();
 34e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd_clear_screen>
			lcd_move_cursor(1,1);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
			lcd_send_string("Not Correct");
 35a:	8f ea       	ldi	r24, 0xAF	; 175
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_send_string>
			lcd_move_cursor(2,1);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
			lcd_send_string("Trials Left:");
 36a:	8b eb       	ldi	r24, 0xBB	; 187
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_send_string>
			lcd_move_cursor(2,14);
 372:	6e e0       	ldi	r22, 0x0E	; 14
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
			lcd_send_char(trials+48);
 37a:	80 e3       	ldi	r24, 0x30	; 48
 37c:	8c 0f       	add	r24, r28
 37e:	0e 94 aa 03 	call	0x754	; 0x754 <lcd_send_char>
			led_on(PORT_C,RED_LED_PIN);
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	83 e4       	ldi	r24, 0x43	; 67
 386:	0e 94 03 04 	call	0x806	; 0x806 <led_on>
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	8d e3       	ldi	r24, 0x3D	; 61
 38e:	99 e4       	ldi	r25, 0x49	; 73
 390:	21 50       	subi	r18, 0x01	; 1
 392:	80 40       	sbci	r24, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <check_password_message+0x88>
 398:	00 c0       	rjmp	.+0      	; 0x39a <check_password_message+0x92>
 39a:	00 00       	nop
			_delay_ms(3000);
			led_off(PORT_C,RED_LED_PIN);
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	83 e4       	ldi	r24, 0x43	; 67
 3a0:	0e 94 07 04 	call	0x80e	; 0x80e <led_off>
			break;
	}
}
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <blocked_message>:

void blocked_message(){
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
		lcd_clear_screen();
 3ae:	0e 94 db 03 	call	0x7b6	; 0x7b6 <lcd_clear_screen>
		lcd_move_cursor(1,1);
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
		lcd_send_string("You Are Blocked");
 3ba:	88 ec       	ldi	r24, 0xC8	; 200
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_send_string>
		lcd_move_cursor(2,1);
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
		lcd_send_string("Time Left(s):");
 3ca:	88 ed       	ldi	r24, 0xD8	; 216
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 ce 03 	call	0x79c	; 0x79c <lcd_send_string>
		led_on(PORT_C,RED_LED_PIN);
 3d2:	63 e0       	ldi	r22, 0x03	; 3
 3d4:	83 e4       	ldi	r24, 0x43	; 67
 3d6:	0e 94 03 04 	call	0x806	; 0x806 <led_on>
		buzzer_on(PORT_C,BUZZER_PIN);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	83 e4       	ldi	r24, 0x43	; 67
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <buzzer_on>
		for(int i=30;i>0;i--){
 3e6:	ce e1       	ldi	r28, 0x1E	; 30
 3e8:	d0 e0       	ldi	r29, 0x00	; 0
 3ea:	1c c0       	rjmp	.+56     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			lcd_move_cursor(2,14);
 3ec:	6e e0       	ldi	r22, 0x0E	; 14
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_move_cursor>
			lcd_send_char((i/10)+48);
 3f4:	ce 01       	movw	r24, r28
 3f6:	6a e0       	ldi	r22, 0x0A	; 10
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	0e 94 54 07 	call	0xea8	; 0xea8 <__divmodhi4>
 3fe:	18 2f       	mov	r17, r24
 400:	80 e3       	ldi	r24, 0x30	; 48
 402:	86 0f       	add	r24, r22
 404:	0e 94 aa 03 	call	0x754	; 0x754 <lcd_send_char>
			lcd_send_char((i%10)+48);
 408:	80 e3       	ldi	r24, 0x30	; 48
 40a:	81 0f       	add	r24, r17
 40c:	0e 94 aa 03 	call	0x754	; 0x754 <lcd_send_char>
 410:	2f ef       	ldi	r18, 0xFF	; 255
 412:	89 e6       	ldi	r24, 0x69	; 105
 414:	98 e1       	ldi	r25, 0x18	; 24
 416:	21 50       	subi	r18, 0x01	; 1
 418:	80 40       	sbci	r24, 0x00	; 0
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
		lcd_send_string("You Are Blocked");
		lcd_move_cursor(2,1);
		lcd_send_string("Time Left(s):");
		led_on(PORT_C,RED_LED_PIN);
		buzzer_on(PORT_C,BUZZER_PIN);
		for(int i=30;i>0;i--){
 422:	21 97       	sbiw	r28, 0x01	; 1
 424:	1c 16       	cp	r1, r28
 426:	1d 06       	cpc	r1, r29
 428:	0c f3       	brlt	.-62     	; 0x3ec <blocked_message+0x44>
			lcd_move_cursor(2,14);
			lcd_send_char((i/10)+48);
			lcd_send_char((i%10)+48);
			_delay_ms(1000);
		}
		led_off(PORT_C,RED_LED_PIN);
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	83 e4       	ldi	r24, 0x43	; 67
 42e:	0e 94 07 04 	call	0x80e	; 0x80e <led_off>
		buzzer_off(PORT_C,BUZZER_PIN);
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	83 e4       	ldi	r24, 0x43	; 67
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <buzzer_off>
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	08 95       	ret

00000446 <app>:

void app(){
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	1f 92       	push	r1
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
		lcd_init();
 450:	0e 94 5d 03 	call	0x6ba	; 0x6ba <lcd_init>
		keypad_init();
 454:	0e 94 76 02 	call	0x4ec	; 0x4ec <keypad_init>
		buzzer_init(PORT_C,BUZZER_PIN);
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	83 e4       	ldi	r24, 0x43	; 67
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <buzzer_init>
		led_init(PORT_C,GREEN_LED_PIN);
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	83 e4       	ldi	r24, 0x43	; 67
 468:	0e 94 ff 03 	call	0x7fe	; 0x7fe <led_init>
		led_init(PORT_C,RED_LED_PIN);
 46c:	63 e0       	ldi	r22, 0x03	; 3
 46e:	83 e4       	ldi	r24, 0x43	; 67
 470:	0e 94 ff 03 	call	0x7fe	; 0x7fe <led_init>
		led_off(PORT_C,GREEN_LED_PIN);
 474:	62 e0       	ldi	r22, 0x02	; 2
 476:	83 e4       	ldi	r24, 0x43	; 67
 478:	0e 94 07 04 	call	0x80e	; 0x80e <led_off>
		led_off(PORT_C,RED_LED_PIN);
 47c:	63 e0       	ldi	r22, 0x03	; 3
 47e:	83 e4       	ldi	r24, 0x43	; 67
 480:	0e 94 07 04 	call	0x80e	; 0x80e <led_off>
		safe_status check_safe_status ;
		uint8 * password;
		password_status check_password_status;
		uint8 trials=MAX_TRIALS;
 484:	12 e0       	ldi	r17, 0x02	; 2
		while(1){
			check_safe_status =  check_status();
 486:	0e 94 41 00 	call	0x82	; 0x82 <check_status>
 48a:	89 83       	std	Y+1, r24	; 0x01
			password = read_password(&check_safe_status);
 48c:	ce 01       	movw	r24, r28
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	0e 94 89 00 	call	0x112	; 0x112 <read_password>
			while(check_safe_status == FIRST_SETUP){
 494:	04 c0       	rjmp	.+8      	; 0x49e <app+0x58>
				password= read_password(&check_safe_status);
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	0e 94 89 00 	call	0x112	; 0x112 <read_password>
		password_status check_password_status;
		uint8 trials=MAX_TRIALS;
		while(1){
			check_safe_status =  check_status();
			password = read_password(&check_safe_status);
			while(check_safe_status == FIRST_SETUP){
 49e:	29 81       	ldd	r18, Y+1	; 0x01
 4a0:	22 23       	and	r18, r18
 4a2:	c9 f3       	breq	.-14     	; 0x496 <app+0x50>
				password= read_password(&check_safe_status);
			}
			if (check_safe_status == PASSWORD_SET){
 4a4:	22 30       	cpi	r18, 0x02	; 2
 4a6:	19 f4       	brne	.+6      	; 0x4ae <app+0x68>
				set_new_password(password);
 4a8:	0e 94 6b 00 	call	0xd6	; 0xd6 <set_new_password>
 4ac:	ec cf       	rjmp	.-40     	; 0x486 <app+0x40>
			}
			else{
				check_password_status = check_password(password);
 4ae:	0e 94 4b 00 	call	0x96	; 0x96 <check_password>
				if (check_password_status == CORRECT){
 4b2:	81 11       	cpse	r24, r1
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <app+0x7a>
					check_password_message(check_password_status,trials);
 4b6:	61 2f       	mov	r22, r17
 4b8:	0e 94 84 01 	call	0x308	; 0x308 <check_password_message>
					trials=MAX_TRIALS;
 4bc:	12 e0       	ldi	r17, 0x02	; 2
 4be:	e3 cf       	rjmp	.-58     	; 0x486 <app+0x40>
				}
				else{
					trials--;
 4c0:	11 50       	subi	r17, 0x01	; 1
					if (trials==0){
 4c2:	21 f4       	brne	.+8      	; 0x4cc <app+0x86>
						blocked_message();
 4c4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <blocked_message>
						trials=MAX_TRIALS;
 4c8:	12 e0       	ldi	r17, 0x02	; 2
 4ca:	dd cf       	rjmp	.-70     	; 0x486 <app+0x40>
					}
					else{
					check_password_message(check_password_status,trials);
 4cc:	61 2f       	mov	r22, r17
 4ce:	0e 94 84 01 	call	0x308	; 0x308 <check_password_message>
 4d2:	d9 cf       	rjmp	.-78     	; 0x486 <app+0x40>

000004d4 <buzzer_init>:
 */ 

#include "BUZZER.h"

void buzzer_init(uint8 port, uint8 pin){
	pin_init(port, pin, OUTPUT);
 4d4:	40 e0       	ldi	r20, 0x00	; 0
 4d6:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 4da:	08 95       	ret

000004dc <buzzer_on>:
}

void buzzer_on(uint8 port, uint8 pin){
	pin_write(port, pin, HIGH);
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
 4e2:	08 95       	ret

000004e4 <buzzer_off>:
}

void buzzer_off(uint8 port, uint8 pin){
	pin_write(port, pin, LOW);
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
 4ea:	08 95       	ret

000004ec <keypad_init>:
 */ 

#include "keypad.h"

void keypad_init(){
		pin_init(keypad_port,0,OUTPUT);
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	84 e4       	ldi	r24, 0x44	; 68
 4f2:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
		pin_init(keypad_port,1,OUTPUT);
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	84 e4       	ldi	r24, 0x44	; 68
 4fc:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
		pin_init(keypad_port,2,OUTPUT);
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	62 e0       	ldi	r22, 0x02	; 2
 504:	84 e4       	ldi	r24, 0x44	; 68
 506:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
		pin_init(keypad_port,3,OUTPUT);
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	84 e4       	ldi	r24, 0x44	; 68
 510:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
		
		pin_init(keypad_port,4,INPUT);
 514:	41 e0       	ldi	r20, 0x01	; 1
 516:	64 e0       	ldi	r22, 0x04	; 4
 518:	84 e4       	ldi	r24, 0x44	; 68
 51a:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
		pin_init(keypad_port,5,INPUT);
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	65 e0       	ldi	r22, 0x05	; 5
 522:	84 e4       	ldi	r24, 0x44	; 68
 524:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
		pin_init(keypad_port,6,INPUT);
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	66 e0       	ldi	r22, 0x06	; 6
 52c:	84 e4       	ldi	r24, 0x44	; 68
 52e:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
		pin_init(keypad_port,7,INPUT);
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	67 e0       	ldi	r22, 0x07	; 7
 536:	84 e4       	ldi	r24, 0x44	; 68
 538:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
		
		
		internal_pullup_enable(keypad_port,4);
 53c:	64 e0       	ldi	r22, 0x04	; 4
 53e:	84 e4       	ldi	r24, 0x44	; 68
 540:	0e 94 0a 07 	call	0xe14	; 0xe14 <internal_pullup_enable>
		internal_pullup_enable(keypad_port,5);
 544:	65 e0       	ldi	r22, 0x05	; 5
 546:	84 e4       	ldi	r24, 0x44	; 68
 548:	0e 94 0a 07 	call	0xe14	; 0xe14 <internal_pullup_enable>
		internal_pullup_enable(keypad_port,6);
 54c:	66 e0       	ldi	r22, 0x06	; 6
 54e:	84 e4       	ldi	r24, 0x44	; 68
 550:	0e 94 0a 07 	call	0xe14	; 0xe14 <internal_pullup_enable>
		internal_pullup_enable(keypad_port,7);
 554:	67 e0       	ldi	r22, 0x07	; 7
 556:	84 e4       	ldi	r24, 0x44	; 68
 558:	0e 94 0a 07 	call	0xe14	; 0xe14 <internal_pullup_enable>
 55c:	08 95       	ret

0000055e <keypad_read>:
}

uint8 keypad_read(){
 55e:	cf 92       	push	r12
 560:	df 92       	push	r13
 562:	ef 92       	push	r14
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
 572:	60 97       	sbiw	r28, 0x10	; 16
 574:	0f b6       	in	r0, 0x3f	; 63
 576:	f8 94       	cli
 578:	de bf       	out	0x3e, r29	; 62
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	cd bf       	out	0x3d, r28	; 61
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 57e:	80 e1       	ldi	r24, 0x10	; 16
 580:	e0 e6       	ldi	r30, 0x60	; 96
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	de 01       	movw	r26, r28
 586:	11 96       	adiw	r26, 0x01	; 1
 588:	01 90       	ld	r0, Z+
 58a:	0d 92       	st	X+, r0
 58c:	8a 95       	dec	r24
 58e:	e1 f7       	brne	.-8      	; 0x588 <keypad_read+0x2a>
	uint8 return_value=0xff;
	uint8 check=1;
	for (int i=0;i<4;i++){
 590:	c1 2c       	mov	r12, r1
 592:	d1 2c       	mov	r13, r1
}

uint8 keypad_read(){
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 return_value=0xff;
	uint8 check=1;
 594:	ff 24       	eor	r15, r15
 596:	f3 94       	inc	r15
		internal_pullup_enable(keypad_port,7);
}

uint8 keypad_read(){
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 return_value=0xff;
 598:	ee 24       	eor	r14, r14
 59a:	ea 94       	dec	r14
	uint8 check=1;
	for (int i=0;i<4;i++){
 59c:	3e c0       	rjmp	.+124    	; 0x61a <keypad_read+0xbc>
		pin_write(keypad_port,0,HIGH);
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	84 e4       	ldi	r24, 0x44	; 68
 5a4:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
		pin_write(keypad_port,1,HIGH);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	84 e4       	ldi	r24, 0x44	; 68
 5ae:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
		pin_write(keypad_port,2,HIGH);
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	84 e4       	ldi	r24, 0x44	; 68
 5b8:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
		pin_write(keypad_port,3,HIGH);
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	63 e0       	ldi	r22, 0x03	; 3
 5c0:	84 e4       	ldi	r24, 0x44	; 68
 5c2:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
		pin_write(keypad_port,i,LOW);
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	6c 2d       	mov	r22, r12
 5ca:	84 e4       	ldi	r24, 0x44	; 68
 5cc:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
		for (int j=0;j<4;j++){
 5d0:	00 e0       	ldi	r16, 0x00	; 0
 5d2:	10 e0       	ldi	r17, 0x00	; 0
 5d4:	1a c0       	rjmp	.+52     	; 0x60a <keypad_read+0xac>
			check = pin_read(keypad_port,j+4);
 5d6:	64 e0       	ldi	r22, 0x04	; 4
 5d8:	60 0f       	add	r22, r16
 5da:	84 e4       	ldi	r24, 0x44	; 68
 5dc:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <pin_read>
 5e0:	f8 2e       	mov	r15, r24
			if (check == 0){
 5e2:	81 11       	cpse	r24, r1
 5e4:	10 c0       	rjmp	.+32     	; 0x606 <keypad_read+0xa8>
				return_value = characters[i][j];
 5e6:	c6 01       	movw	r24, r12
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	2c 0f       	add	r18, r28
 5f6:	3d 1f       	adc	r19, r29
 5f8:	82 0f       	add	r24, r18
 5fa:	93 1f       	adc	r25, r19
 5fc:	fc 01       	movw	r30, r24
 5fe:	e0 0f       	add	r30, r16
 600:	f1 1f       	adc	r31, r17
 602:	e0 80       	ld	r14, Z
				break;
 604:	05 c0       	rjmp	.+10     	; 0x610 <keypad_read+0xb2>
		pin_write(keypad_port,0,HIGH);
		pin_write(keypad_port,1,HIGH);
		pin_write(keypad_port,2,HIGH);
		pin_write(keypad_port,3,HIGH);
		pin_write(keypad_port,i,LOW);
		for (int j=0;j<4;j++){
 606:	0f 5f       	subi	r16, 0xFF	; 255
 608:	1f 4f       	sbci	r17, 0xFF	; 255
 60a:	04 30       	cpi	r16, 0x04	; 4
 60c:	11 05       	cpc	r17, r1
 60e:	1c f3       	brlt	.-58     	; 0x5d6 <keypad_read+0x78>
				return_value = characters[i][j];
				break;
			}

			}
			if (check ==0){
 610:	ff 20       	and	r15, r15
 612:	41 f0       	breq	.+16     	; 0x624 <keypad_read+0xc6>

uint8 keypad_read(){
	uint8 characters[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	uint8 return_value=0xff;
	uint8 check=1;
	for (int i=0;i<4;i++){
 614:	3f ef       	ldi	r19, 0xFF	; 255
 616:	c3 1a       	sub	r12, r19
 618:	d3 0a       	sbc	r13, r19
 61a:	84 e0       	ldi	r24, 0x04	; 4
 61c:	c8 16       	cp	r12, r24
 61e:	d1 04       	cpc	r13, r1
 620:	0c f4       	brge	.+2      	; 0x624 <keypad_read+0xc6>
 622:	bd cf       	rjmp	.-134    	; 0x59e <keypad_read+0x40>
		}
		
		
		return return_value;
			
 624:	8e 2d       	mov	r24, r14
 626:	60 96       	adiw	r28, 0x10	; 16
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	f8 94       	cli
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	0f be       	out	0x3f, r0	; 63
 630:	cd bf       	out	0x3d, r28	; 61
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	ff 90       	pop	r15
 63c:	ef 90       	pop	r14
 63e:	df 90       	pop	r13
 640:	cf 90       	pop	r12
 642:	08 95       	ret

00000644 <send_falling_edge>:

}


static void send_falling_edge(){
	pin_write(CONTROL_PORT,ENABLE_PIN,HIGH);
 644:	41 e0       	ldi	r20, 0x01	; 1
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	82 e4       	ldi	r24, 0x42	; 66
 64a:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
 64e:	83 ef       	ldi	r24, 0xF3	; 243
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <send_falling_edge+0xe>
 656:	00 c0       	rjmp	.+0      	; 0x658 <send_falling_edge+0x14>
 658:	00 00       	nop
	_delay_ms(2);
	pin_write(CONTROL_PORT,ENABLE_PIN,LOW);
 65a:	40 e0       	ldi	r20, 0x00	; 0
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	82 e4       	ldi	r24, 0x42	; 66
 660:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
 664:	83 ef       	ldi	r24, 0xF3	; 243
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <send_falling_edge+0x24>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <send_falling_edge+0x2a>
 66e:	00 00       	nop
 670:	08 95       	ret

00000672 <lcd_send_cmd>:
	_delay_ms(2);
}

void lcd_send_cmd(char cmd){
 672:	cf 93       	push	r28
 674:	c8 2f       	mov	r28, r24
	port_write(DATA_PORT,cmd);
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,LOW);
	send_falling_edge();
	
	#elif defined FOUR_BIT_MODE
	port_nibble_write(DATA_PORT,DATA_NIBBLE,cmd>>4);
 676:	48 2f       	mov	r20, r24
 678:	42 95       	swap	r20
 67a:	4f 70       	andi	r20, 0x0F	; 15
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	81 e4       	ldi	r24, 0x41	; 65
 680:	0e 94 b7 06 	call	0xd6e	; 0xd6e <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,LOW);
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	62 e0       	ldi	r22, 0x02	; 2
 688:	82 e4       	ldi	r24, 0x42	; 66
 68a:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
	send_falling_edge();
 68e:	0e 94 22 03 	call	0x644	; 0x644 <send_falling_edge>
	port_nibble_write(DATA_PORT,DATA_NIBBLE,cmd);
 692:	4c 2f       	mov	r20, r28
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	81 e4       	ldi	r24, 0x41	; 65
 698:	0e 94 b7 06 	call	0xd6e	; 0xd6e <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,LOW);
 69c:	40 e0       	ldi	r20, 0x00	; 0
 69e:	62 e0       	ldi	r22, 0x02	; 2
 6a0:	82 e4       	ldi	r24, 0x42	; 66
 6a2:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
	send_falling_edge();
 6a6:	0e 94 22 03 	call	0x644	; 0x644 <send_falling_edge>
 6aa:	89 ef       	ldi	r24, 0xF9	; 249
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <lcd_send_cmd+0x3c>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <lcd_send_cmd+0x42>
 6b4:	00 00       	nop
	_delay_ms(1);
	#endif
}
 6b6:	cf 91       	pop	r28
 6b8:	08 95       	ret

000006ba <lcd_init>:
 6ba:	8f e4       	ldi	r24, 0x4F	; 79
 6bc:	93 ec       	ldi	r25, 0xC3	; 195
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <lcd_init+0x4>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <lcd_init+0xa>
 6c4:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd(ENTRY_MODE_CMD);
	_delay_ms(1);
	
	#elif defined FOUR_BIT_MODE
	port_nibble_init(DATA_PORT,DATA_NIBBLE,OUTPUT);
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	81 e4       	ldi	r24, 0x41	; 65
 6cc:	0e 94 4d 05 	call	0xa9a	; 0xa9a <port_nibble_init>
	pin_init(CONTROL_PORT,ENABLE_PIN,OUTPUT);
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	82 e4       	ldi	r24, 0x42	; 66
 6d6:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
	pin_init(CONTROL_PORT,READ_WRITE_PIN,OUTPUT);
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	61 e0       	ldi	r22, 0x01	; 1
 6de:	82 e4       	ldi	r24, 0x42	; 66
 6e0:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
	pin_init(CONTROL_PORT,REGISTER_SELECT_PIN,OUTPUT);
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	82 e4       	ldi	r24, 0x42	; 66
 6ea:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
	
	pin_write(CONTROL_PORT,READ_WRITE_PIN,LOW);
 6ee:	40 e0       	ldi	r20, 0x00	; 0
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	82 e4       	ldi	r24, 0x42	; 66
 6f4:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
	
	lcd_send_cmd(RETURN_HOME_CMD);
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	0e 94 39 03 	call	0x672	; 0x672 <lcd_send_cmd>
 6fe:	83 ec       	ldi	r24, 0xC3	; 195
 700:	99 e0       	ldi	r25, 0x09	; 9
 702:	01 97       	sbiw	r24, 0x01	; 1
 704:	f1 f7       	brne	.-4      	; 0x702 <lcd_init+0x48>
 706:	00 c0       	rjmp	.+0      	; 0x708 <lcd_init+0x4e>
 708:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd(FOUR_BIT_CMD);
 70a:	88 e2       	ldi	r24, 0x28	; 40
 70c:	0e 94 39 03 	call	0x672	; 0x672 <lcd_send_cmd>
 710:	89 ef       	ldi	r24, 0xF9	; 249
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <lcd_init+0x5a>
 718:	00 c0       	rjmp	.+0      	; 0x71a <lcd_init+0x60>
 71a:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(CURSOR_ON_DISPLAY_ON_CMD);
 71c:	8e e0       	ldi	r24, 0x0E	; 14
 71e:	0e 94 39 03 	call	0x672	; 0x672 <lcd_send_cmd>
 722:	89 ef       	ldi	r24, 0xF9	; 249
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	01 97       	sbiw	r24, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <lcd_init+0x6c>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <lcd_init+0x72>
 72c:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd(CLEAR_SCREEN_CMD);
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	0e 94 39 03 	call	0x672	; 0x672 <lcd_send_cmd>
 734:	83 ec       	ldi	r24, 0xC3	; 195
 736:	99 e0       	ldi	r25, 0x09	; 9
 738:	01 97       	sbiw	r24, 0x01	; 1
 73a:	f1 f7       	brne	.-4      	; 0x738 <lcd_init+0x7e>
 73c:	00 c0       	rjmp	.+0      	; 0x73e <lcd_init+0x84>
 73e:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd(ENTRY_MODE_CMD);
 740:	86 e0       	ldi	r24, 0x06	; 6
 742:	0e 94 39 03 	call	0x672	; 0x672 <lcd_send_cmd>
 746:	89 ef       	ldi	r24, 0xF9	; 249
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <lcd_init+0x90>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <lcd_init+0x96>
 750:	00 00       	nop
 752:	08 95       	ret

00000754 <lcd_send_char>:
	_delay_ms(1);
	#endif
}


void lcd_send_char(char data){
 754:	cf 93       	push	r28
 756:	c8 2f       	mov	r28, r24
	port_write(DATA_PORT,data);
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,HIGH);
	send_falling_edge();
	
	#elif defined FOUR_BIT_MODE
	port_nibble_write(DATA_PORT,DATA_NIBBLE,data>>4);
 758:	48 2f       	mov	r20, r24
 75a:	42 95       	swap	r20
 75c:	4f 70       	andi	r20, 0x0F	; 15
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	81 e4       	ldi	r24, 0x41	; 65
 762:	0e 94 b7 06 	call	0xd6e	; 0xd6e <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,HIGH);
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	62 e0       	ldi	r22, 0x02	; 2
 76a:	82 e4       	ldi	r24, 0x42	; 66
 76c:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
	send_falling_edge();
 770:	0e 94 22 03 	call	0x644	; 0x644 <send_falling_edge>
	port_nibble_write(DATA_PORT,DATA_NIBBLE,data);
 774:	4c 2f       	mov	r20, r28
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	81 e4       	ldi	r24, 0x41	; 65
 77a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <port_nibble_write>
	pin_write(CONTROL_PORT,REGISTER_SELECT_PIN,HIGH);
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	62 e0       	ldi	r22, 0x02	; 2
 782:	82 e4       	ldi	r24, 0x42	; 66
 784:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
	send_falling_edge();
 788:	0e 94 22 03 	call	0x644	; 0x644 <send_falling_edge>
 78c:	89 ef       	ldi	r24, 0xF9	; 249
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <lcd_send_char+0x3c>
 794:	00 c0       	rjmp	.+0      	; 0x796 <lcd_send_char+0x42>
 796:	00 00       	nop
	_delay_ms(1);
	#endif
	
	
}
 798:	cf 91       	pop	r28
 79a:	08 95       	ret

0000079c <lcd_send_string>:

void lcd_send_string(char* data){
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	ec 01       	movw	r28, r24
	while(*data != '\0'){
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <lcd_send_string+0xe>
		lcd_send_char(*data);
 7a4:	0e 94 aa 03 	call	0x754	; 0x754 <lcd_send_char>
		data++;
 7a8:	21 96       	adiw	r28, 0x01	; 1
	
	
}

void lcd_send_string(char* data){
	while(*data != '\0'){
 7aa:	88 81       	ld	r24, Y
 7ac:	81 11       	cpse	r24, r1
 7ae:	fa cf       	rjmp	.-12     	; 0x7a4 <lcd_send_string+0x8>
		lcd_send_char(*data);
		data++;
	}
}
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <lcd_clear_screen>:

void lcd_clear_screen(){
	lcd_send_cmd(CLEAR_SCREEN_CMD);
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	0e 94 39 03 	call	0x672	; 0x672 <lcd_send_cmd>
 7bc:	83 ec       	ldi	r24, 0xC3	; 195
 7be:	99 e0       	ldi	r25, 0x09	; 9
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <lcd_clear_screen+0xa>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <lcd_clear_screen+0x10>
 7c6:	00 00       	nop
 7c8:	08 95       	ret

000007ca <lcd_move_cursor>:
	_delay_ms(10);
}

void lcd_move_cursor(char row, char column){
	char data;
	if(row<1 || row>2 || column<1 || column>16){
 7ca:	9f ef       	ldi	r25, 0xFF	; 255
 7cc:	98 0f       	add	r25, r24
 7ce:	92 30       	cpi	r25, 0x02	; 2
 7d0:	78 f4       	brcc	.+30     	; 0x7f0 <lcd_move_cursor+0x26>
 7d2:	66 23       	and	r22, r22
 7d4:	69 f0       	breq	.+26     	; 0x7f0 <lcd_move_cursor+0x26>
 7d6:	61 31       	cpi	r22, 0x11	; 17
 7d8:	58 f4       	brcc	.+22     	; 0x7f0 <lcd_move_cursor+0x26>
		;
	}else if(row == 1){
 7da:	81 30       	cpi	r24, 0x01	; 1
 7dc:	29 f4       	brne	.+10     	; 0x7e8 <lcd_move_cursor+0x1e>
		data = 0x80 + column - 1;
		lcd_send_cmd(data);
 7de:	8f e7       	ldi	r24, 0x7F	; 127
 7e0:	86 0f       	add	r24, r22
 7e2:	0e 94 39 03 	call	0x672	; 0x672 <lcd_send_cmd>
 7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <lcd_move_cursor+0x26>
	}else{
		data = 0xc0 + column - 1;
		lcd_send_cmd(data);
 7e8:	8f eb       	ldi	r24, 0xBF	; 191
 7ea:	86 0f       	add	r24, r22
 7ec:	0e 94 39 03 	call	0x672	; 0x672 <lcd_send_cmd>
 7f0:	89 ef       	ldi	r24, 0xF9	; 249
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <lcd_move_cursor+0x2a>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <lcd_move_cursor+0x30>
 7fa:	00 00       	nop
 7fc:	08 95       	ret

000007fe <led_init>:
 *  Author: himah
 */ 

#include "LED.h"
void led_init(uint8 port, uint8 pin){
	pin_init(port,pin,OUTPUT);
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 804:	08 95       	ret

00000806 <led_on>:
}

void led_on(uint8 port, uint8 pin){
	pin_write(port,pin,HIGH);
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
 80c:	08 95       	ret

0000080e <led_off>:
}

void led_off(uint8 port, uint8 pin){
	pin_write(port,pin,LOW);
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	0e 94 80 04 	call	0x900	; 0x900 <pin_write>
 814:	08 95       	ret

00000816 <main>:


int main(void)
{
    /* Replace with your application code */
    app();
 816:	0e 94 23 02 	call	0x446	; 0x446 <app>
}
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	08 95       	ret

00000820 <pin_init>:
		case PORT_D:
		if (nibble==LOW_NIBBLE){
			PORTD_REG &= 0xf0;
		}
		else{
			PORTD_REG &= 0x0f;
 820:	82 34       	cpi	r24, 0x42	; 66
 822:	19 f1       	breq	.+70     	; 0x86a <__stack+0xb>
 824:	18 f4       	brcc	.+6      	; 0x82c <pin_init+0xc>
 826:	81 34       	cpi	r24, 0x41	; 65
 828:	39 f0       	breq	.+14     	; 0x838 <pin_init+0x18>
 82a:	08 95       	ret
 82c:	83 34       	cpi	r24, 0x43	; 67
 82e:	b1 f1       	breq	.+108    	; 0x89c <__stack+0x3d>
 830:	84 34       	cpi	r24, 0x44	; 68
 832:	09 f4       	brne	.+2      	; 0x836 <pin_init+0x16>
 834:	4c c0       	rjmp	.+152    	; 0x8ce <__stack+0x6f>
 836:	08 95       	ret
 838:	41 11       	cpse	r20, r1
 83a:	0b c0       	rjmp	.+22     	; 0x852 <pin_init+0x32>
 83c:	2a b3       	in	r18, 0x1a	; 26
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	02 c0       	rjmp	.+4      	; 0x848 <pin_init+0x28>
 844:	88 0f       	add	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	6a 95       	dec	r22
 84a:	e2 f7       	brpl	.-8      	; 0x844 <pin_init+0x24>
 84c:	82 2b       	or	r24, r18
 84e:	8a bb       	out	0x1a, r24	; 26
 850:	08 95       	ret
 852:	2a b3       	in	r18, 0x1a	; 26
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <pin_init+0x3e>
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	6a 95       	dec	r22
 860:	e2 f7       	brpl	.-8      	; 0x85a <pin_init+0x3a>
 862:	80 95       	com	r24
 864:	82 23       	and	r24, r18
 866:	8a bb       	out	0x1a, r24	; 26
 868:	08 95       	ret
 86a:	41 11       	cpse	r20, r1
 86c:	0b c0       	rjmp	.+22     	; 0x884 <__stack+0x25>
 86e:	27 b3       	in	r18, 0x17	; 23
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	6a 95       	dec	r22
 87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
 87e:	82 2b       	or	r24, r18
 880:	87 bb       	out	0x17, r24	; 23
 882:	08 95       	ret
 884:	27 b3       	in	r18, 0x17	; 23
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	6a 95       	dec	r22
 892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
 894:	80 95       	com	r24
 896:	82 23       	and	r24, r18
 898:	87 bb       	out	0x17, r24	; 23
 89a:	08 95       	ret
 89c:	41 11       	cpse	r20, r1
 89e:	0b c0       	rjmp	.+22     	; 0x8b6 <__stack+0x57>
 8a0:	24 b3       	in	r18, 0x14	; 20
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__stack+0x4d>
 8a8:	88 0f       	add	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	6a 95       	dec	r22
 8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <__stack+0x49>
 8b0:	82 2b       	or	r24, r18
 8b2:	84 bb       	out	0x14, r24	; 20
 8b4:	08 95       	ret
 8b6:	24 b3       	in	r18, 0x14	; 20
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	6a 95       	dec	r22
 8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
 8c6:	80 95       	com	r24
 8c8:	82 23       	and	r24, r18
 8ca:	84 bb       	out	0x14, r24	; 20
 8cc:	08 95       	ret
 8ce:	41 11       	cpse	r20, r1
 8d0:	0b c0       	rjmp	.+22     	; 0x8e8 <__stack+0x89>
 8d2:	21 b3       	in	r18, 0x11	; 17
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	6a 95       	dec	r22
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <__stack+0x7b>
 8e2:	82 2b       	or	r24, r18
 8e4:	81 bb       	out	0x11, r24	; 17
 8e6:	08 95       	ret
 8e8:	21 b3       	in	r18, 0x11	; 17
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__stack+0x95>
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	6a 95       	dec	r22
 8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <__stack+0x91>
 8f8:	80 95       	com	r24
 8fa:	82 23       	and	r24, r18
 8fc:	81 bb       	out	0x11, r24	; 17
 8fe:	08 95       	ret

00000900 <pin_write>:
 900:	82 34       	cpi	r24, 0x42	; 66
 902:	19 f1       	breq	.+70     	; 0x94a <pin_write+0x4a>
 904:	18 f4       	brcc	.+6      	; 0x90c <pin_write+0xc>
 906:	81 34       	cpi	r24, 0x41	; 65
 908:	39 f0       	breq	.+14     	; 0x918 <pin_write+0x18>
 90a:	08 95       	ret
 90c:	83 34       	cpi	r24, 0x43	; 67
 90e:	b1 f1       	breq	.+108    	; 0x97c <pin_write+0x7c>
 910:	84 34       	cpi	r24, 0x44	; 68
 912:	09 f4       	brne	.+2      	; 0x916 <pin_write+0x16>
 914:	4c c0       	rjmp	.+152    	; 0x9ae <pin_write+0xae>
 916:	08 95       	ret
 918:	41 30       	cpi	r20, 0x01	; 1
 91a:	59 f4       	brne	.+22     	; 0x932 <pin_write+0x32>
 91c:	2b b3       	in	r18, 0x1b	; 27
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	02 c0       	rjmp	.+4      	; 0x928 <pin_write+0x28>
 924:	88 0f       	add	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	6a 95       	dec	r22
 92a:	e2 f7       	brpl	.-8      	; 0x924 <pin_write+0x24>
 92c:	82 2b       	or	r24, r18
 92e:	8b bb       	out	0x1b, r24	; 27
 930:	08 95       	ret
 932:	2b b3       	in	r18, 0x1b	; 27
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	02 c0       	rjmp	.+4      	; 0x93e <pin_write+0x3e>
 93a:	88 0f       	add	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	6a 95       	dec	r22
 940:	e2 f7       	brpl	.-8      	; 0x93a <pin_write+0x3a>
 942:	80 95       	com	r24
 944:	82 23       	and	r24, r18
 946:	8b bb       	out	0x1b, r24	; 27
 948:	08 95       	ret
 94a:	41 30       	cpi	r20, 0x01	; 1
 94c:	59 f4       	brne	.+22     	; 0x964 <pin_write+0x64>
 94e:	28 b3       	in	r18, 0x18	; 24
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	02 c0       	rjmp	.+4      	; 0x95a <pin_write+0x5a>
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	6a 95       	dec	r22
 95c:	e2 f7       	brpl	.-8      	; 0x956 <pin_write+0x56>
 95e:	82 2b       	or	r24, r18
 960:	88 bb       	out	0x18, r24	; 24
 962:	08 95       	ret
 964:	28 b3       	in	r18, 0x18	; 24
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	02 c0       	rjmp	.+4      	; 0x970 <pin_write+0x70>
 96c:	88 0f       	add	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	6a 95       	dec	r22
 972:	e2 f7       	brpl	.-8      	; 0x96c <pin_write+0x6c>
 974:	80 95       	com	r24
 976:	82 23       	and	r24, r18
 978:	88 bb       	out	0x18, r24	; 24
 97a:	08 95       	ret
 97c:	41 30       	cpi	r20, 0x01	; 1
 97e:	59 f4       	brne	.+22     	; 0x996 <pin_write+0x96>
 980:	25 b3       	in	r18, 0x15	; 21
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <pin_write+0x8c>
 988:	88 0f       	add	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	6a 95       	dec	r22
 98e:	e2 f7       	brpl	.-8      	; 0x988 <pin_write+0x88>
 990:	82 2b       	or	r24, r18
 992:	85 bb       	out	0x15, r24	; 21
 994:	08 95       	ret
 996:	25 b3       	in	r18, 0x15	; 21
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <pin_write+0xa2>
 99e:	88 0f       	add	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	6a 95       	dec	r22
 9a4:	e2 f7       	brpl	.-8      	; 0x99e <pin_write+0x9e>
 9a6:	80 95       	com	r24
 9a8:	82 23       	and	r24, r18
 9aa:	85 bb       	out	0x15, r24	; 21
 9ac:	08 95       	ret
 9ae:	41 30       	cpi	r20, 0x01	; 1
 9b0:	59 f4       	brne	.+22     	; 0x9c8 <pin_write+0xc8>
 9b2:	22 b3       	in	r18, 0x12	; 18
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <pin_write+0xbe>
 9ba:	88 0f       	add	r24, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	6a 95       	dec	r22
 9c0:	e2 f7       	brpl	.-8      	; 0x9ba <pin_write+0xba>
 9c2:	82 2b       	or	r24, r18
 9c4:	82 bb       	out	0x12, r24	; 18
 9c6:	08 95       	ret
 9c8:	22 b3       	in	r18, 0x12	; 18
 9ca:	81 e0       	ldi	r24, 0x01	; 1
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <pin_write+0xd4>
 9d0:	88 0f       	add	r24, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	6a 95       	dec	r22
 9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <pin_write+0xd0>
 9d8:	80 95       	com	r24
 9da:	82 23       	and	r24, r18
 9dc:	82 bb       	out	0x12, r24	; 18
 9de:	08 95       	ret

000009e0 <pin_read>:
 9e0:	82 34       	cpi	r24, 0x42	; 66
 9e2:	e9 f0       	breq	.+58     	; 0xa1e <pin_read+0x3e>
 9e4:	18 f4       	brcc	.+6      	; 0x9ec <pin_read+0xc>
 9e6:	81 34       	cpi	r24, 0x41	; 65
 9e8:	31 f0       	breq	.+12     	; 0x9f6 <pin_read+0x16>
 9ea:	55 c0       	rjmp	.+170    	; 0xa96 <pin_read+0xb6>
 9ec:	83 34       	cpi	r24, 0x43	; 67
 9ee:	59 f1       	breq	.+86     	; 0xa46 <pin_read+0x66>
 9f0:	84 34       	cpi	r24, 0x44	; 68
 9f2:	e9 f1       	breq	.+122    	; 0xa6e <pin_read+0x8e>
 9f4:	50 c0       	rjmp	.+160    	; 0xa96 <pin_read+0xb6>
 9f6:	49 b3       	in	r20, 0x19	; 25
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	9c 01       	movw	r18, r24
 9fe:	06 2e       	mov	r0, r22
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <pin_read+0x26>
 a02:	22 0f       	add	r18, r18
 a04:	33 1f       	adc	r19, r19
 a06:	0a 94       	dec	r0
 a08:	e2 f7       	brpl	.-8      	; 0xa02 <pin_read+0x22>
 a0a:	84 2f       	mov	r24, r20
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	82 23       	and	r24, r18
 a10:	93 23       	and	r25, r19
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <pin_read+0x38>
 a14:	95 95       	asr	r25
 a16:	87 95       	ror	r24
 a18:	6a 95       	dec	r22
 a1a:	e2 f7       	brpl	.-8      	; 0xa14 <pin_read+0x34>
 a1c:	08 95       	ret
 a1e:	46 b3       	in	r20, 0x16	; 22
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	9c 01       	movw	r18, r24
 a26:	06 2e       	mov	r0, r22
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <pin_read+0x4e>
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	0a 94       	dec	r0
 a30:	e2 f7       	brpl	.-8      	; 0xa2a <pin_read+0x4a>
 a32:	84 2f       	mov	r24, r20
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	82 23       	and	r24, r18
 a38:	93 23       	and	r25, r19
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <pin_read+0x60>
 a3c:	95 95       	asr	r25
 a3e:	87 95       	ror	r24
 a40:	6a 95       	dec	r22
 a42:	e2 f7       	brpl	.-8      	; 0xa3c <pin_read+0x5c>
 a44:	08 95       	ret
 a46:	43 b3       	in	r20, 0x13	; 19
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	9c 01       	movw	r18, r24
 a4e:	06 2e       	mov	r0, r22
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <pin_read+0x76>
 a52:	22 0f       	add	r18, r18
 a54:	33 1f       	adc	r19, r19
 a56:	0a 94       	dec	r0
 a58:	e2 f7       	brpl	.-8      	; 0xa52 <pin_read+0x72>
 a5a:	84 2f       	mov	r24, r20
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	82 23       	and	r24, r18
 a60:	93 23       	and	r25, r19
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <pin_read+0x88>
 a64:	95 95       	asr	r25
 a66:	87 95       	ror	r24
 a68:	6a 95       	dec	r22
 a6a:	e2 f7       	brpl	.-8      	; 0xa64 <pin_read+0x84>
 a6c:	08 95       	ret
 a6e:	40 b3       	in	r20, 0x10	; 16
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	9c 01       	movw	r18, r24
 a76:	06 2e       	mov	r0, r22
 a78:	02 c0       	rjmp	.+4      	; 0xa7e <pin_read+0x9e>
 a7a:	22 0f       	add	r18, r18
 a7c:	33 1f       	adc	r19, r19
 a7e:	0a 94       	dec	r0
 a80:	e2 f7       	brpl	.-8      	; 0xa7a <pin_read+0x9a>
 a82:	84 2f       	mov	r24, r20
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	82 23       	and	r24, r18
 a88:	93 23       	and	r25, r19
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <pin_read+0xb0>
 a8c:	95 95       	asr	r25
 a8e:	87 95       	ror	r24
 a90:	6a 95       	dec	r22
 a92:	e2 f7       	brpl	.-8      	; 0xa8c <pin_read+0xac>
 a94:	08 95       	ret
 a96:	80 e0       	ldi	r24, 0x00	; 0
 a98:	08 95       	ret

00000a9a <port_nibble_init>:
 a9a:	82 34       	cpi	r24, 0x42	; 66
 a9c:	09 f4       	brne	.+2      	; 0xaa0 <port_nibble_init+0x6>
 a9e:	62 c0       	rjmp	.+196    	; 0xb64 <port_nibble_init+0xca>
 aa0:	18 f4       	brcc	.+6      	; 0xaa8 <port_nibble_init+0xe>
 aa2:	81 34       	cpi	r24, 0x41	; 65
 aa4:	41 f0       	breq	.+16     	; 0xab6 <port_nibble_init+0x1c>
 aa6:	08 95       	ret
 aa8:	83 34       	cpi	r24, 0x43	; 67
 aaa:	09 f4       	brne	.+2      	; 0xaae <port_nibble_init+0x14>
 aac:	b2 c0       	rjmp	.+356    	; 0xc12 <port_nibble_init+0x178>
 aae:	84 34       	cpi	r24, 0x44	; 68
 ab0:	09 f4       	brne	.+2      	; 0xab4 <port_nibble_init+0x1a>
 ab2:	06 c1       	rjmp	.+524    	; 0xcc0 <port_nibble_init+0x226>
 ab4:	08 95       	ret
 ab6:	61 11       	cpse	r22, r1
 ab8:	2a c0       	rjmp	.+84     	; 0xb0e <port_nibble_init+0x74>
 aba:	41 11       	cpse	r20, r1
 abc:	13 c0       	rjmp	.+38     	; 0xae4 <port_nibble_init+0x4a>
 abe:	81 e4       	ldi	r24, 0x41	; 65
 ac0:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 ac4:	40 e0       	ldi	r20, 0x00	; 0
 ac6:	61 e0       	ldi	r22, 0x01	; 1
 ac8:	81 e4       	ldi	r24, 0x41	; 65
 aca:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 ace:	40 e0       	ldi	r20, 0x00	; 0
 ad0:	62 e0       	ldi	r22, 0x02	; 2
 ad2:	81 e4       	ldi	r24, 0x41	; 65
 ad4:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 ad8:	40 e0       	ldi	r20, 0x00	; 0
 ada:	63 e0       	ldi	r22, 0x03	; 3
 adc:	81 e4       	ldi	r24, 0x41	; 65
 ade:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 ae2:	08 95       	ret
 ae4:	41 e0       	ldi	r20, 0x01	; 1
 ae6:	60 e0       	ldi	r22, 0x00	; 0
 ae8:	81 e4       	ldi	r24, 0x41	; 65
 aea:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 aee:	41 e0       	ldi	r20, 0x01	; 1
 af0:	61 e0       	ldi	r22, 0x01	; 1
 af2:	81 e4       	ldi	r24, 0x41	; 65
 af4:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 af8:	41 e0       	ldi	r20, 0x01	; 1
 afa:	62 e0       	ldi	r22, 0x02	; 2
 afc:	81 e4       	ldi	r24, 0x41	; 65
 afe:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b02:	41 e0       	ldi	r20, 0x01	; 1
 b04:	63 e0       	ldi	r22, 0x03	; 3
 b06:	81 e4       	ldi	r24, 0x41	; 65
 b08:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b0c:	08 95       	ret
 b0e:	41 11       	cpse	r20, r1
 b10:	14 c0       	rjmp	.+40     	; 0xb3a <port_nibble_init+0xa0>
 b12:	64 e0       	ldi	r22, 0x04	; 4
 b14:	81 e4       	ldi	r24, 0x41	; 65
 b16:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b1a:	40 e0       	ldi	r20, 0x00	; 0
 b1c:	65 e0       	ldi	r22, 0x05	; 5
 b1e:	81 e4       	ldi	r24, 0x41	; 65
 b20:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b24:	40 e0       	ldi	r20, 0x00	; 0
 b26:	66 e0       	ldi	r22, 0x06	; 6
 b28:	81 e4       	ldi	r24, 0x41	; 65
 b2a:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b2e:	40 e0       	ldi	r20, 0x00	; 0
 b30:	67 e0       	ldi	r22, 0x07	; 7
 b32:	81 e4       	ldi	r24, 0x41	; 65
 b34:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b38:	08 95       	ret
 b3a:	41 e0       	ldi	r20, 0x01	; 1
 b3c:	64 e0       	ldi	r22, 0x04	; 4
 b3e:	81 e4       	ldi	r24, 0x41	; 65
 b40:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b44:	41 e0       	ldi	r20, 0x01	; 1
 b46:	65 e0       	ldi	r22, 0x05	; 5
 b48:	81 e4       	ldi	r24, 0x41	; 65
 b4a:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b4e:	41 e0       	ldi	r20, 0x01	; 1
 b50:	66 e0       	ldi	r22, 0x06	; 6
 b52:	81 e4       	ldi	r24, 0x41	; 65
 b54:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b58:	41 e0       	ldi	r20, 0x01	; 1
 b5a:	67 e0       	ldi	r22, 0x07	; 7
 b5c:	81 e4       	ldi	r24, 0x41	; 65
 b5e:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b62:	08 95       	ret
 b64:	61 11       	cpse	r22, r1
 b66:	2a c0       	rjmp	.+84     	; 0xbbc <port_nibble_init+0x122>
 b68:	41 11       	cpse	r20, r1
 b6a:	13 c0       	rjmp	.+38     	; 0xb92 <port_nibble_init+0xf8>
 b6c:	82 e4       	ldi	r24, 0x42	; 66
 b6e:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b72:	40 e0       	ldi	r20, 0x00	; 0
 b74:	61 e0       	ldi	r22, 0x01	; 1
 b76:	82 e4       	ldi	r24, 0x42	; 66
 b78:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b7c:	40 e0       	ldi	r20, 0x00	; 0
 b7e:	62 e0       	ldi	r22, 0x02	; 2
 b80:	82 e4       	ldi	r24, 0x42	; 66
 b82:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b86:	40 e0       	ldi	r20, 0x00	; 0
 b88:	63 e0       	ldi	r22, 0x03	; 3
 b8a:	82 e4       	ldi	r24, 0x42	; 66
 b8c:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b90:	08 95       	ret
 b92:	41 e0       	ldi	r20, 0x01	; 1
 b94:	60 e0       	ldi	r22, 0x00	; 0
 b96:	82 e4       	ldi	r24, 0x42	; 66
 b98:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 b9c:	41 e0       	ldi	r20, 0x01	; 1
 b9e:	61 e0       	ldi	r22, 0x01	; 1
 ba0:	82 e4       	ldi	r24, 0x42	; 66
 ba2:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 ba6:	41 e0       	ldi	r20, 0x01	; 1
 ba8:	62 e0       	ldi	r22, 0x02	; 2
 baa:	82 e4       	ldi	r24, 0x42	; 66
 bac:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 bb0:	41 e0       	ldi	r20, 0x01	; 1
 bb2:	63 e0       	ldi	r22, 0x03	; 3
 bb4:	82 e4       	ldi	r24, 0x42	; 66
 bb6:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 bba:	08 95       	ret
 bbc:	41 11       	cpse	r20, r1
 bbe:	14 c0       	rjmp	.+40     	; 0xbe8 <port_nibble_init+0x14e>
 bc0:	64 e0       	ldi	r22, 0x04	; 4
 bc2:	82 e4       	ldi	r24, 0x42	; 66
 bc4:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 bc8:	40 e0       	ldi	r20, 0x00	; 0
 bca:	65 e0       	ldi	r22, 0x05	; 5
 bcc:	82 e4       	ldi	r24, 0x42	; 66
 bce:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 bd2:	40 e0       	ldi	r20, 0x00	; 0
 bd4:	66 e0       	ldi	r22, 0x06	; 6
 bd6:	82 e4       	ldi	r24, 0x42	; 66
 bd8:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 bdc:	40 e0       	ldi	r20, 0x00	; 0
 bde:	67 e0       	ldi	r22, 0x07	; 7
 be0:	82 e4       	ldi	r24, 0x42	; 66
 be2:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 be6:	08 95       	ret
 be8:	41 e0       	ldi	r20, 0x01	; 1
 bea:	64 e0       	ldi	r22, 0x04	; 4
 bec:	82 e4       	ldi	r24, 0x42	; 66
 bee:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 bf2:	41 e0       	ldi	r20, 0x01	; 1
 bf4:	65 e0       	ldi	r22, 0x05	; 5
 bf6:	82 e4       	ldi	r24, 0x42	; 66
 bf8:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 bfc:	41 e0       	ldi	r20, 0x01	; 1
 bfe:	66 e0       	ldi	r22, 0x06	; 6
 c00:	82 e4       	ldi	r24, 0x42	; 66
 c02:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c06:	41 e0       	ldi	r20, 0x01	; 1
 c08:	67 e0       	ldi	r22, 0x07	; 7
 c0a:	82 e4       	ldi	r24, 0x42	; 66
 c0c:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c10:	08 95       	ret
 c12:	61 11       	cpse	r22, r1
 c14:	2a c0       	rjmp	.+84     	; 0xc6a <port_nibble_init+0x1d0>
 c16:	41 11       	cpse	r20, r1
 c18:	13 c0       	rjmp	.+38     	; 0xc40 <port_nibble_init+0x1a6>
 c1a:	83 e4       	ldi	r24, 0x43	; 67
 c1c:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c20:	40 e0       	ldi	r20, 0x00	; 0
 c22:	61 e0       	ldi	r22, 0x01	; 1
 c24:	83 e4       	ldi	r24, 0x43	; 67
 c26:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c2a:	40 e0       	ldi	r20, 0x00	; 0
 c2c:	62 e0       	ldi	r22, 0x02	; 2
 c2e:	83 e4       	ldi	r24, 0x43	; 67
 c30:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c34:	40 e0       	ldi	r20, 0x00	; 0
 c36:	63 e0       	ldi	r22, 0x03	; 3
 c38:	83 e4       	ldi	r24, 0x43	; 67
 c3a:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c3e:	08 95       	ret
 c40:	41 e0       	ldi	r20, 0x01	; 1
 c42:	60 e0       	ldi	r22, 0x00	; 0
 c44:	83 e4       	ldi	r24, 0x43	; 67
 c46:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c4a:	41 e0       	ldi	r20, 0x01	; 1
 c4c:	61 e0       	ldi	r22, 0x01	; 1
 c4e:	83 e4       	ldi	r24, 0x43	; 67
 c50:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c54:	41 e0       	ldi	r20, 0x01	; 1
 c56:	62 e0       	ldi	r22, 0x02	; 2
 c58:	83 e4       	ldi	r24, 0x43	; 67
 c5a:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c5e:	41 e0       	ldi	r20, 0x01	; 1
 c60:	63 e0       	ldi	r22, 0x03	; 3
 c62:	83 e4       	ldi	r24, 0x43	; 67
 c64:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c68:	08 95       	ret
 c6a:	41 11       	cpse	r20, r1
 c6c:	14 c0       	rjmp	.+40     	; 0xc96 <port_nibble_init+0x1fc>
 c6e:	64 e0       	ldi	r22, 0x04	; 4
 c70:	83 e4       	ldi	r24, 0x43	; 67
 c72:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c76:	40 e0       	ldi	r20, 0x00	; 0
 c78:	65 e0       	ldi	r22, 0x05	; 5
 c7a:	83 e4       	ldi	r24, 0x43	; 67
 c7c:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c80:	40 e0       	ldi	r20, 0x00	; 0
 c82:	66 e0       	ldi	r22, 0x06	; 6
 c84:	83 e4       	ldi	r24, 0x43	; 67
 c86:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c8a:	40 e0       	ldi	r20, 0x00	; 0
 c8c:	67 e0       	ldi	r22, 0x07	; 7
 c8e:	83 e4       	ldi	r24, 0x43	; 67
 c90:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 c94:	08 95       	ret
 c96:	41 e0       	ldi	r20, 0x01	; 1
 c98:	64 e0       	ldi	r22, 0x04	; 4
 c9a:	83 e4       	ldi	r24, 0x43	; 67
 c9c:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 ca0:	41 e0       	ldi	r20, 0x01	; 1
 ca2:	65 e0       	ldi	r22, 0x05	; 5
 ca4:	83 e4       	ldi	r24, 0x43	; 67
 ca6:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 caa:	41 e0       	ldi	r20, 0x01	; 1
 cac:	66 e0       	ldi	r22, 0x06	; 6
 cae:	83 e4       	ldi	r24, 0x43	; 67
 cb0:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 cb4:	41 e0       	ldi	r20, 0x01	; 1
 cb6:	67 e0       	ldi	r22, 0x07	; 7
 cb8:	83 e4       	ldi	r24, 0x43	; 67
 cba:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 cbe:	08 95       	ret
 cc0:	61 11       	cpse	r22, r1
 cc2:	2a c0       	rjmp	.+84     	; 0xd18 <port_nibble_init+0x27e>
 cc4:	41 11       	cpse	r20, r1
 cc6:	13 c0       	rjmp	.+38     	; 0xcee <port_nibble_init+0x254>
 cc8:	84 e4       	ldi	r24, 0x44	; 68
 cca:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 cce:	40 e0       	ldi	r20, 0x00	; 0
 cd0:	61 e0       	ldi	r22, 0x01	; 1
 cd2:	84 e4       	ldi	r24, 0x44	; 68
 cd4:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 cd8:	40 e0       	ldi	r20, 0x00	; 0
 cda:	62 e0       	ldi	r22, 0x02	; 2
 cdc:	84 e4       	ldi	r24, 0x44	; 68
 cde:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 ce2:	40 e0       	ldi	r20, 0x00	; 0
 ce4:	63 e0       	ldi	r22, 0x03	; 3
 ce6:	84 e4       	ldi	r24, 0x44	; 68
 ce8:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 cec:	08 95       	ret
 cee:	41 e0       	ldi	r20, 0x01	; 1
 cf0:	60 e0       	ldi	r22, 0x00	; 0
 cf2:	84 e4       	ldi	r24, 0x44	; 68
 cf4:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 cf8:	41 e0       	ldi	r20, 0x01	; 1
 cfa:	61 e0       	ldi	r22, 0x01	; 1
 cfc:	84 e4       	ldi	r24, 0x44	; 68
 cfe:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d02:	41 e0       	ldi	r20, 0x01	; 1
 d04:	62 e0       	ldi	r22, 0x02	; 2
 d06:	84 e4       	ldi	r24, 0x44	; 68
 d08:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d0c:	41 e0       	ldi	r20, 0x01	; 1
 d0e:	63 e0       	ldi	r22, 0x03	; 3
 d10:	84 e4       	ldi	r24, 0x44	; 68
 d12:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d16:	08 95       	ret
 d18:	41 11       	cpse	r20, r1
 d1a:	14 c0       	rjmp	.+40     	; 0xd44 <port_nibble_init+0x2aa>
 d1c:	64 e0       	ldi	r22, 0x04	; 4
 d1e:	84 e4       	ldi	r24, 0x44	; 68
 d20:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d24:	40 e0       	ldi	r20, 0x00	; 0
 d26:	65 e0       	ldi	r22, 0x05	; 5
 d28:	84 e4       	ldi	r24, 0x44	; 68
 d2a:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d2e:	40 e0       	ldi	r20, 0x00	; 0
 d30:	66 e0       	ldi	r22, 0x06	; 6
 d32:	84 e4       	ldi	r24, 0x44	; 68
 d34:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d38:	40 e0       	ldi	r20, 0x00	; 0
 d3a:	67 e0       	ldi	r22, 0x07	; 7
 d3c:	84 e4       	ldi	r24, 0x44	; 68
 d3e:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d42:	08 95       	ret
 d44:	41 e0       	ldi	r20, 0x01	; 1
 d46:	64 e0       	ldi	r22, 0x04	; 4
 d48:	84 e4       	ldi	r24, 0x44	; 68
 d4a:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d4e:	41 e0       	ldi	r20, 0x01	; 1
 d50:	65 e0       	ldi	r22, 0x05	; 5
 d52:	84 e4       	ldi	r24, 0x44	; 68
 d54:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d58:	41 e0       	ldi	r20, 0x01	; 1
 d5a:	66 e0       	ldi	r22, 0x06	; 6
 d5c:	84 e4       	ldi	r24, 0x44	; 68
 d5e:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d62:	41 e0       	ldi	r20, 0x01	; 1
 d64:	67 e0       	ldi	r22, 0x07	; 7
 d66:	84 e4       	ldi	r24, 0x44	; 68
 d68:	0e 94 10 04 	call	0x820	; 0x820 <pin_init>
 d6c:	08 95       	ret

00000d6e <port_nibble_write>:
 d6e:	82 34       	cpi	r24, 0x42	; 66
 d70:	d9 f0       	breq	.+54     	; 0xda8 <port_nibble_write+0x3a>
 d72:	18 f4       	brcc	.+6      	; 0xd7a <port_nibble_write+0xc>
 d74:	81 34       	cpi	r24, 0x41	; 65
 d76:	31 f0       	breq	.+12     	; 0xd84 <port_nibble_write+0x16>
 d78:	08 95       	ret
 d7a:	83 34       	cpi	r24, 0x43	; 67
 d7c:	39 f1       	breq	.+78     	; 0xdcc <port_nibble_write+0x5e>
 d7e:	84 34       	cpi	r24, 0x44	; 68
 d80:	b9 f1       	breq	.+110    	; 0xdf0 <port_nibble_write+0x82>
 d82:	08 95       	ret
 d84:	61 11       	cpse	r22, r1
 d86:	07 c0       	rjmp	.+14     	; 0xd96 <port_nibble_write+0x28>
 d88:	8b b3       	in	r24, 0x1b	; 27
 d8a:	80 7f       	andi	r24, 0xF0	; 240
 d8c:	8b bb       	out	0x1b, r24	; 27
 d8e:	8b b3       	in	r24, 0x1b	; 27
 d90:	48 2b       	or	r20, r24
 d92:	4b bb       	out	0x1b, r20	; 27
 d94:	08 95       	ret
 d96:	42 95       	swap	r20
 d98:	40 7f       	andi	r20, 0xF0	; 240
 d9a:	8b b3       	in	r24, 0x1b	; 27
 d9c:	8f 70       	andi	r24, 0x0F	; 15
 d9e:	8b bb       	out	0x1b, r24	; 27
 da0:	8b b3       	in	r24, 0x1b	; 27
 da2:	48 2b       	or	r20, r24
 da4:	4b bb       	out	0x1b, r20	; 27
 da6:	08 95       	ret
 da8:	61 11       	cpse	r22, r1
 daa:	07 c0       	rjmp	.+14     	; 0xdba <port_nibble_write+0x4c>
 dac:	88 b3       	in	r24, 0x18	; 24
 dae:	80 7f       	andi	r24, 0xF0	; 240
 db0:	88 bb       	out	0x18, r24	; 24
 db2:	88 b3       	in	r24, 0x18	; 24
 db4:	48 2b       	or	r20, r24
 db6:	48 bb       	out	0x18, r20	; 24
 db8:	08 95       	ret
 dba:	42 95       	swap	r20
 dbc:	40 7f       	andi	r20, 0xF0	; 240
 dbe:	88 b3       	in	r24, 0x18	; 24
 dc0:	8f 70       	andi	r24, 0x0F	; 15
 dc2:	88 bb       	out	0x18, r24	; 24
 dc4:	88 b3       	in	r24, 0x18	; 24
 dc6:	48 2b       	or	r20, r24
 dc8:	48 bb       	out	0x18, r20	; 24
 dca:	08 95       	ret
 dcc:	61 11       	cpse	r22, r1
 dce:	07 c0       	rjmp	.+14     	; 0xdde <port_nibble_write+0x70>
 dd0:	85 b3       	in	r24, 0x15	; 21
 dd2:	80 7f       	andi	r24, 0xF0	; 240
 dd4:	85 bb       	out	0x15, r24	; 21
 dd6:	85 b3       	in	r24, 0x15	; 21
 dd8:	48 2b       	or	r20, r24
 dda:	45 bb       	out	0x15, r20	; 21
 ddc:	08 95       	ret
 dde:	42 95       	swap	r20
 de0:	40 7f       	andi	r20, 0xF0	; 240
 de2:	85 b3       	in	r24, 0x15	; 21
 de4:	8f 70       	andi	r24, 0x0F	; 15
 de6:	85 bb       	out	0x15, r24	; 21
 de8:	85 b3       	in	r24, 0x15	; 21
 dea:	48 2b       	or	r20, r24
 dec:	45 bb       	out	0x15, r20	; 21
 dee:	08 95       	ret
 df0:	61 11       	cpse	r22, r1
 df2:	07 c0       	rjmp	.+14     	; 0xe02 <port_nibble_write+0x94>
 df4:	82 b3       	in	r24, 0x12	; 18
 df6:	80 7f       	andi	r24, 0xF0	; 240
 df8:	82 bb       	out	0x12, r24	; 18
 dfa:	82 b3       	in	r24, 0x12	; 18
 dfc:	48 2b       	or	r20, r24
 dfe:	42 bb       	out	0x12, r20	; 18
 e00:	08 95       	ret
 e02:	42 95       	swap	r20
 e04:	40 7f       	andi	r20, 0xF0	; 240
 e06:	82 b3       	in	r24, 0x12	; 18
 e08:	8f 70       	andi	r24, 0x0F	; 15
 e0a:	82 bb       	out	0x12, r24	; 18
 e0c:	82 b3       	in	r24, 0x12	; 18
 e0e:	48 2b       	or	r20, r24
 e10:	42 bb       	out	0x12, r20	; 18
 e12:	08 95       	ret

00000e14 <internal_pullup_enable>:
}



void internal_pullup_enable(uint8 port, uint8 pin){
	switch(port){
 e14:	82 34       	cpi	r24, 0x42	; 66
 e16:	a1 f0       	breq	.+40     	; 0xe40 <internal_pullup_enable+0x2c>
 e18:	18 f4       	brcc	.+6      	; 0xe20 <internal_pullup_enable+0xc>
 e1a:	81 34       	cpi	r24, 0x41	; 65
 e1c:	31 f0       	breq	.+12     	; 0xe2a <internal_pullup_enable+0x16>
 e1e:	08 95       	ret
 e20:	83 34       	cpi	r24, 0x43	; 67
 e22:	c9 f0       	breq	.+50     	; 0xe56 <internal_pullup_enable+0x42>
 e24:	84 34       	cpi	r24, 0x44	; 68
 e26:	11 f1       	breq	.+68     	; 0xe6c <internal_pullup_enable+0x58>
 e28:	08 95       	ret
		case PORT_A:
			SET_BIT(PORTA_REG,pin);
 e2a:	2b b3       	in	r18, 0x1b	; 27
 e2c:	81 e0       	ldi	r24, 0x01	; 1
 e2e:	90 e0       	ldi	r25, 0x00	; 0
 e30:	02 c0       	rjmp	.+4      	; 0xe36 <internal_pullup_enable+0x22>
 e32:	88 0f       	add	r24, r24
 e34:	99 1f       	adc	r25, r25
 e36:	6a 95       	dec	r22
 e38:	e2 f7       	brpl	.-8      	; 0xe32 <internal_pullup_enable+0x1e>
 e3a:	82 2b       	or	r24, r18
 e3c:	8b bb       	out	0x1b, r24	; 27
			break;
 e3e:	08 95       	ret
		case PORT_B:
			SET_BIT(PORTB_REG,pin);
 e40:	28 b3       	in	r18, 0x18	; 24
 e42:	81 e0       	ldi	r24, 0x01	; 1
 e44:	90 e0       	ldi	r25, 0x00	; 0
 e46:	02 c0       	rjmp	.+4      	; 0xe4c <internal_pullup_enable+0x38>
 e48:	88 0f       	add	r24, r24
 e4a:	99 1f       	adc	r25, r25
 e4c:	6a 95       	dec	r22
 e4e:	e2 f7       	brpl	.-8      	; 0xe48 <internal_pullup_enable+0x34>
 e50:	82 2b       	or	r24, r18
 e52:	88 bb       	out	0x18, r24	; 24
			break;
 e54:	08 95       	ret
		case PORT_C:
			SET_BIT(PORTC_REG,pin);
 e56:	25 b3       	in	r18, 0x15	; 21
 e58:	81 e0       	ldi	r24, 0x01	; 1
 e5a:	90 e0       	ldi	r25, 0x00	; 0
 e5c:	02 c0       	rjmp	.+4      	; 0xe62 <internal_pullup_enable+0x4e>
 e5e:	88 0f       	add	r24, r24
 e60:	99 1f       	adc	r25, r25
 e62:	6a 95       	dec	r22
 e64:	e2 f7       	brpl	.-8      	; 0xe5e <internal_pullup_enable+0x4a>
 e66:	82 2b       	or	r24, r18
 e68:	85 bb       	out	0x15, r24	; 21
			break;
 e6a:	08 95       	ret
		case PORT_D:
			SET_BIT(PORTD_REG,pin);
 e6c:	22 b3       	in	r18, 0x12	; 18
 e6e:	81 e0       	ldi	r24, 0x01	; 1
 e70:	90 e0       	ldi	r25, 0x00	; 0
 e72:	02 c0       	rjmp	.+4      	; 0xe78 <internal_pullup_enable+0x64>
 e74:	88 0f       	add	r24, r24
 e76:	99 1f       	adc	r25, r25
 e78:	6a 95       	dec	r22
 e7a:	e2 f7       	brpl	.-8      	; 0xe74 <internal_pullup_enable+0x60>
 e7c:	82 2b       	or	r24, r18
 e7e:	82 bb       	out	0x12, r24	; 18
 e80:	08 95       	ret

00000e82 <EEPROM_write>:
 */ 
#include "EEPROM.h"


void EEPROM_write(uint16 adress, uint8 data){
		EEAR_REG = adress;
 e82:	9f bb       	out	0x1f, r25	; 31
 e84:	8e bb       	out	0x1e, r24	; 30
		EEDR_REG = data;
 e86:	6d bb       	out	0x1d, r22	; 29
		
		SET_BIT(EECR_REG,EEMWE_BIT);
 e88:	8c b3       	in	r24, 0x1c	; 28
 e8a:	84 60       	ori	r24, 0x04	; 4
 e8c:	8c bb       	out	0x1c, r24	; 28
		SET_BIT(EECR_REG,EEWE_BIT);
 e8e:	8c b3       	in	r24, 0x1c	; 28
 e90:	82 60       	ori	r24, 0x02	; 2
 e92:	8c bb       	out	0x1c, r24	; 28
		
		while(GET_BIT(EECR_REG,EEWE_BIT) == 1); 
 e94:	e1 99       	sbic	0x1c, 1	; 28
 e96:	fe cf       	rjmp	.-4      	; 0xe94 <EEPROM_write+0x12>
}
 e98:	08 95       	ret

00000e9a <EEPROM_read>:

uint8 EEPROM_read(uint16 adress){
		EEAR_REG = adress;
 e9a:	9f bb       	out	0x1f, r25	; 31
 e9c:	8e bb       	out	0x1e, r24	; 30
		SET_BIT(EECR_REG,EERE_BIT);
 e9e:	8c b3       	in	r24, 0x1c	; 28
 ea0:	81 60       	ori	r24, 0x01	; 1
 ea2:	8c bb       	out	0x1c, r24	; 28
		
		return EEDR_REG;
 ea4:	8d b3       	in	r24, 0x1d	; 29
 ea6:	08 95       	ret

00000ea8 <__divmodhi4>:
 ea8:	97 fb       	bst	r25, 7
 eaa:	07 2e       	mov	r0, r23
 eac:	16 f4       	brtc	.+4      	; 0xeb2 <__divmodhi4+0xa>
 eae:	00 94       	com	r0
 eb0:	07 d0       	rcall	.+14     	; 0xec0 <__divmodhi4_neg1>
 eb2:	77 fd       	sbrc	r23, 7
 eb4:	09 d0       	rcall	.+18     	; 0xec8 <__divmodhi4_neg2>
 eb6:	0e 94 68 07 	call	0xed0	; 0xed0 <__udivmodhi4>
 eba:	07 fc       	sbrc	r0, 7
 ebc:	05 d0       	rcall	.+10     	; 0xec8 <__divmodhi4_neg2>
 ebe:	3e f4       	brtc	.+14     	; 0xece <__divmodhi4_exit>

00000ec0 <__divmodhi4_neg1>:
 ec0:	90 95       	com	r25
 ec2:	81 95       	neg	r24
 ec4:	9f 4f       	sbci	r25, 0xFF	; 255
 ec6:	08 95       	ret

00000ec8 <__divmodhi4_neg2>:
 ec8:	70 95       	com	r23
 eca:	61 95       	neg	r22
 ecc:	7f 4f       	sbci	r23, 0xFF	; 255

00000ece <__divmodhi4_exit>:
 ece:	08 95       	ret

00000ed0 <__udivmodhi4>:
 ed0:	aa 1b       	sub	r26, r26
 ed2:	bb 1b       	sub	r27, r27
 ed4:	51 e1       	ldi	r21, 0x11	; 17
 ed6:	07 c0       	rjmp	.+14     	; 0xee6 <__udivmodhi4_ep>

00000ed8 <__udivmodhi4_loop>:
 ed8:	aa 1f       	adc	r26, r26
 eda:	bb 1f       	adc	r27, r27
 edc:	a6 17       	cp	r26, r22
 ede:	b7 07       	cpc	r27, r23
 ee0:	10 f0       	brcs	.+4      	; 0xee6 <__udivmodhi4_ep>
 ee2:	a6 1b       	sub	r26, r22
 ee4:	b7 0b       	sbc	r27, r23

00000ee6 <__udivmodhi4_ep>:
 ee6:	88 1f       	adc	r24, r24
 ee8:	99 1f       	adc	r25, r25
 eea:	5a 95       	dec	r21
 eec:	a9 f7       	brne	.-22     	; 0xed8 <__udivmodhi4_loop>
 eee:	80 95       	com	r24
 ef0:	90 95       	com	r25
 ef2:	bc 01       	movw	r22, r24
 ef4:	cd 01       	movw	r24, r26
 ef6:	08 95       	ret

00000ef8 <_exit>:
 ef8:	f8 94       	cli

00000efa <__stop_program>:
 efa:	ff cf       	rjmp	.-2      	; 0xefa <__stop_program>
